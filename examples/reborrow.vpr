domain Tuple[A, B] {
    function create(a: A, b: B): Tuple[A, B];
    function fst(b: Tuple[A, B]): A;
    function snd(b: Tuple[A, B]): B;

    axiom {
        forall a: A, b: B :: fst(create(a, b)) == a
    }
    axiom {
        forall a: A, b: B :: snd(create(a, b)) == b
    }
}

// domain Ptr[T] {
//     function create(v: T, p: Perm): Ptr[T];
//     function value(p: Ptr[T]): T;
//     function perms(p: Ptr[T]): Perm;

//     axiom {
//         forall v: T, p: Perm :: acc(value(create(v, p)), p)
//     }
//     axiom {
//         forall v: T, p: Perm :: value(create(v, p)) == v
//     }
//     axiom {
//         forall v: T, p: Perm :: perms(create(v, p)) == p
//     }
// }

field n: Int

predicate T(x: Ref) {
  acc(x.n, write)
}

method f(x: Ref, p: Perm)
  requires
    none < p && p <= write &&
    acc(T(x), p)
  ensures
    acc(T(x), p)
{
  var y: Ref;
  y := x;
  // unfold acc(T(y), p/2)
  var z: Ref;
  z := y;
  // unfold acc(T(z), p/4)

  package acc(T(y), p/2) --* acc(T(x), p/2)

  // inhale acc(T(y), p/2) && (acc(T(y), p/2) --* acc(T(x), p/2))
  unfold acc(T(y), p/2)
  unfold acc(T(x), p/2)
  assert x.n == y.n;
  fold acc(T(x), p/2)
  fold acc(T(y), p/2)
  // apply acc(T(y), p/2) --* acc(T(x), p/2)
}

// acc(x, write)

// let y = &*x;
// y := x
// acc(y, write)[1/2]
// unfold acc(y, write * 1/2)

define ptrAcc(T, x, p) acc(T(fst(x)), snd(x) * p)
define ptrUnfold(T, x, p) { unfold acc(T(fst(x)), snd(x) * p) }
define ptrUnfolding(T, x, p, e) unfolding acc(T(fst(x)), snd(x) * p) in e
define ptrFold(T, x, p) { fold acc(T(fst(x)), snd(x) * p) }

define ptrReborrow(T, x, p) ( create(fst(x), snd(x) * p) )

method g(x: Tuple[Ref, Perm])
  requires
    none < snd(x) && snd(x) <= write &&
    ptrAcc(T, x, write)
  ensures
    ptrAcc(T, x, write)
{
  var y: Tuple[Ref, Perm];
  y := x;
  // unfold acc(T(y), snd(x)/2)
  var z: Ref;
  z := fst(y);
  // unfold acc(T(z), snd(x)/4)

  package ptrAcc(T, y, 1/2) --* ptrAcc(T, x, 1/2)

  // inhale acc(T(y), snd(x)/2) && (acc(T(y), snd(x)/2) --* acc(T(fst(x)), snd(x)/2))
  ptrUnfold(T, y, 1/2)
  ptrUnfold(T, x, 1/2)
  assert fst(x).n == fst(y).n;
  ptrFold(T, x, 1/2)
  ptrFold(T, y, 1/2)
  // apply acc(T(y), snd(x)/2) --* acc(T(fst(x)), snd(x)/2)

  if (snd(x) == write) {
    ptrUnfold(T, x, write)
    fst(x).n := 15
    ptrFold(T, x, write)

    h(ptrReborrow(T, x, 1/2))

    ptrUnfold(T, x, write)
    assert fst(x).n == 15
    ptrFold(T, x, write)
  }
}

method h(y: Tuple[Ref, Perm])
  requires
    none < snd(y) &&
    ptrAcc(T, y, write)
  ensures ptrAcc(T, y, write)
{}

method q(x: Ref)
  requires T(x)
{
  var y: Ref
  y := x
  exhale acc(T(x), 1/3)
  inhale acc(T(y), 1/3) && (acc(T(y), 1/3) --* acc(T(x), 1/3))
  unfold T(x)
  // assert perm(T(x)) == write
  // apply acc(T(y), 1/3) --* acc(T(x), 1/3)
  // assert perm(T(x)) == write
  assert x == y
  assert perm(T(x)) == perm(T(y))
  // y.n := 5
  // fold T(y)
}
