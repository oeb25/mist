pure struct FoldingTree {
    places: Set[Place],
}

pure struct Place {
    local: int,
    projection: [int],
}

// invariant Place {
//     0 <= self.local && self.local <= 0 &&
//     forall idx in 0..self.projection.len {
//         0 <= self.projection[idx] &&
//              self.projection[idx] <= 0
//     }
// }

pure fn prefix(p: Place) -> Set[Place] {
    if p.projection == [] {
        [p].to_set()
    } else {
        let parent = Place {
            local: p.local,
            projection: p.projection[0..p.projection.len - 1],
        };
        prefix(parent).union([p].to_set())
    }
}

pure fn fields_of_ty(ty: int) -> Set[int] {
    let types = [
        [1, 2],
        [3, 4],
        [5, 6, 7],
        [],
        [],
        [8, 9],
    ];

    if 0 <= ty && ty < types.len {
        types[ty].to_set()
    } else {
        [].to_set()
    }
}

// invariant FoldingTree {
//     forall(p) {
//         if self.places.contains(p) {
//             self.places.intersection(prefix(p)) == prefix(p)
//         } else {
//             true
//         }
//     }
// }

pure fn fields(p: Place) -> Set[Place] {
    let fs =  if p.projection == [] {
        fields_of_ty(p.local).to_list()
    } else {
        fields_of_ty(p.projection[p.projection.len - 1]).to_list()
    };
    fields_helper(p, fs)
}
pure fn fields_helper(p: Place, fs: [int]) -> Set[Place] {
    if fs == [] {
        [].to_set()
    } else {
        let np = Place {
            local: p.local,
            projection: p.projection + [fs[0]],
        };
        [np].to_set().union(fields_helper(p, fs[1..]))
    }
}

pure fn leaves(t: FoldingTree) -> Set[Place] {
    leaves_helper(t, t.places.to_list())
}
pure fn leaves_helper(t: FoldingTree, ps: [Place]) -> Set[Place]
    req forall idx in 0..ps.len { t.places.contains(ps[idx]) }
    ens forall(p, f) if result.contains(p) && fields(p).contains(f) {
        !(result.contains(f))
    } else {
        true
    }
{
    if ps == [] {
        [].to_set()
    } else {
        let rest = leaves_helper(t, ps[1..]);
        let p = ps[0];
        if fields(p).intersection(t.places).cardinality == 0 {
            [p].to_set().union(rest)
        } else {
            rest
        }
    }
}

fn smoke() -> bool {
    assert false;
    false
}

pure fn unfold_(p: Place, t: FoldingTree) -> FoldingTree
    req forall p in t.places {
            t.places.intersection(prefix(p)) == prefix(p)
        },
        leaves(t).contains(p)
    ens forall f in fields(p) { !(t.places.contains(f)) }
    ens forall p in t.places { result.places.contains(p) }
    ens forall f in fields(p) { result.places.contains(f) }
    ens forall f in fields(p) { leaves(result).contains(f) }
{
    FoldingTree {
        places: t.places.union(fields(p))
    }
}
