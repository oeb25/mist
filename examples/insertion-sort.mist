pure fn sorted(xs: [int]) -> bool
    dec xs
{
    if xs.len > 1 {
        xs[0] <= xs[1] && sorted(xs[1..])
    }
}

// sanity check
ghost fn lemma_total_order(xs: [int], i: int, j: int)
    req sorted(xs),
        0 <= i, i <= j, j < xs.len
    ens xs[i] <= xs[j]
    dec xs
{
    if i != 0 {
        lemma_total_order(xs[1..], i-1, j-1);
    } else if i != j {
        lemma_total_order(xs[1..], 0, j-1);
    }
}

pure ghost fn same_elements(xs: [int], ys: [int]) -> bool {
    xs.to_multi_set() == ys.to_multi_set()
}

fn insertion_sort(xs: [int]) -> [int]
    ens sorted(result),
        same_elements(xs, result)
    dec xs
{
    if xs == [] {
        []
    } else {
        insert(xs[0], insertion_sort(xs[1..]))
    }
}

fn insert(x: int, xs: [int]) -> [int]
    req sorted(xs)
    ens sorted(result),
        result.len == xs.len + 1,
        if xs == [] { result[0] == x } else { result[0] == x || result[0] == xs[0] },
        same_elements([x] + xs, result)
    dec xs
{
    if xs == [] {
        [x]
    } else {
        let y = xs[0];
        if x < y {
            lemma_insert_smallest(x, xs);
            [x] + xs
        } else {
            let res = insert(x, xs[1..]);
            lemma_insert_smallest(y, res);
            [y] + res
        }
    }
}

ghost fn lemma_insert_smallest(x: int, xs: [int])
    req sorted(xs), if xs != [] { x <= xs[0] }
    ens sorted([x] + xs)
{
    if xs != [] {
        let ys = [x] + xs;
        assert xs == ys[1..]; // triggering ground term
    }
}
