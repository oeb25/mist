pure struct FoldingTree {
    // places: ghost Set[Place],
}

pure struct Place {
    local: int,
    projection: [int],
}

// invariant Place {
//     0 <= self.local && self.local <= 0 &&
//     forall idx in 0..self.projection.len {
//         0 <= self.projection[idx] &&
//              self.projection[idx] <= 0
//     }
// }

pure ghost fn prefix(p: Place) -> Set[Place];
pure ghost fn fields_of_ty(ty: int) -> Set[int];

invariant FoldingTree {
    forall(p: Place) {
        if self.places.contains(p) {
            self.places.intersection(prefix(p)) == prefix(p)
        } else {
            true
        }
    }
}

pure ghost fn fields(p: Place) -> Set[Place];
pure ghost fn leaves(t: FoldingTree) -> Set[Place];
//  {
//     leaves_helper(t, t.places.to_list())
// }
// pure ghost fn leaves_helper(t: FoldingTree, ps: [Place]) -> Set[Place]
//     req forall idx in 0..ps.len { t.places.contains(ps[idx]) }
//     ens forall(p, f) if result.contains(p) && fields(p).contains(f) {
//         !(result.contains(f))
//     } else {
//         true
//     }
// {
//     if ps == [] {
//         [].to_set()
//     } else {
//         let rest = leaves_helper(t, ps[1..]);
//         let p = ps[0];
//         if fields(p).intersection(t.places).cardinality == 0 {
//             [p].to_set().union(rest)
//         } else {
//             rest
//         }
//     }
// }

fn smoke() -> bool {
    assert false;
    false
}

ghost fn unfold_(p: Place, t: FoldingTree) -> FoldingTree
    req forall p in t.places {
            t.places.intersection(prefix(p)) == prefix(p)
        },
        leaves(t).contains(p)
    ens forall f in fields(p) { !(t.places.contains(f)) }
    ens forall p in t.places { result.places.contains(p) }
    ens forall f in fields(p) { result.places.contains(f) }
    ens forall f in fields(p) { leaves(result).contains(f) }
{
    FoldingTree {
        places: t.places.union(fields(p))
    }
}
