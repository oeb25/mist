struct List {
    next: List?,
    elem: int,
}

// struct List {
//     next: &List?,
//     ghost next_life: Perm,
//     elem: int,
// }

fn head(this: &mut List) -> int {
    this.elem
}

fn append(this: &mut List, e: int) {
    if this.next == null {
        let n = List {
            next: null,
        };
        this.elem = e;
        this.next = n;
    } else {
        append(&mut this.next, e);
    }
}

fn prepend(this: List, e: int) -> List {
    List { next: this, elem: e }
}

fn create() -> List {
    List {}
}

fn concat(this: &mut List, that: List) {
    if this.next == null {
        this.next = that.next;
        this.elem = that.elem;
    } else {
        concat(&mut this.next, that);
    }
}

fn reverse(this: List) -> List {
    reverse_helper(this, null)
}

fn reverse_helper(this: List, last: List?) -> List {
    if this.next == null {
        if last == null {
            this
        } else {
            last
        }
    } else {
        let n = this.next;
        reverse_helper(n, this)
    }
}
