struct List {
    next: ?List,
    elem: int,
}

pure fn content(list: &List) -> [int] {
    if list.next != null {
        [list.elem] + content(&list.next!)
    } else {
        []
    }
}

fn head(this: &mut List) -> int {
    this.elem
}

fn append(this: &mut List, e: int) {
    if this.next == null {
        this.elem = e;
        this.next = null;
    } else {
        append(&mut this.next!, e);
    }
}

fn prepend(this: List, e: int) -> List {
    List { next: this, elem: e }
}


fn concat(this: &mut List, that: List)
    // ens content(this) == old(content(this) + content(&that))
{
    if this.next == null {
        this.next = that.next;
        this.elem = that.elem;
    } else {
        concat(&mut this.next!, that);
    }
}

fn reverse(this: List) -> List {
    reverse_helper(this, null)
}

fn reverse_helper(this: List, last: ?List) -> List {
    if this.next == null {
        if last == null {
            this
        } else {
            last!
        }
    } else {
        let n = this.next;
        this.next = null;
        reverse_helper(n, this)
    }
}
