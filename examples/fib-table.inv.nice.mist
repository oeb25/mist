struct FibTable {
  values: [int]
}

invariant FibTable {
  forall i in 0..self.values.len {
    self.values[i] == fib(i)
  }
}

fn compute_up_to(t: &mut FibTable, n: int)
  ens t.values.len >= n
{
  while t.values.len < n
    dec n - t.values.len
  {
    if t.values.len < 2 {
      t.values = [1, 1];
    } else {
      t.values = t.values + [t.values[t.values.len - 1] + t.values[t.values.len - 2]];
    }
  }
}

pure ghost fn fib(n: int) -> int
  req n >= 0
{
  if n < 2 { 1 } else { fib(n - 1) + fib(n - 2) }
}
