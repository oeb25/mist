struct FibTable {
  values: [int]
}

fn compute_up_to(t: &mut FibTable, n: int)
  req forall(i: int)
    if 0 <= i && i < t.values.len {
      t.values[i] == fib(i)
    } else {
      true
    }
  req n > 1
  ens t.values.len >= n
  ens forall(i: int)
    if 0 <= i && i < n {
      t.values[i] == fib(i)
    } else {
      true
    }
{
  for i in t.values.len..n
    inv t.values.len == i,
        forall j in 0..i { t.values[j] == fib(j) }
  {
    if i < 2 {
      t.values = [1, 1];
    } else {
      t.values = t.values + [t.values[i - 1] + t.values[i - 2])]
    }
  }
}

pure fn fib(n: int) -> int
  req n >= 0
{
  if n < 2 { 1 } else { fib(n - 1) + fib(n - 2) }
}
