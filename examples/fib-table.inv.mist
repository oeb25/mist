struct FibTable {
  values: [int]
}

invariant FibTable {
  forall(i) if 0 <= i && i < self.values.len {
    self.values[i] == fib(i)
  }
}

fn make(n: int) -> FibTable
  ens result.values.len > n
{
  let t = FibTable { values: [] };
  compute_up_to(&mut t, n);
  t
}

fn compute_up_to(t: &mut FibTable, n: int)
  ens t.values.len > n
{
  while t.values.len <= n
    dec n - t.values.len
  {
    if t.values.len < 2 {
      t.values = [1, 1];
    } else {
      t.values = t.values + [t.values[t.values.len - 1] + t.values[t.values.len - 2]];
    }
  }
}

fn fast_fib(n: int) -> int
  req n >= 0
  ens result == fib(n)
{
  make(n).values[n]
}

pure fn fib(n: int) -> int
  req n >= 0
{
  if n < 2 { 1 } else { fib(n - 1) + fib(n - 2) }
}
