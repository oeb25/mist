// At the time of writing, this is broken to some folding of `let`s, and due to
// equality of references

struct Tuple[T, S] {
    fst: T,
    snd: S,
}

invariant[X] Tuple[X, X] {
    self.fst == self.snd
}

pure fn sum(t: Tuple[&Tuple[int, int], &Tuple[int, int]]) -> int {
    t.fst.fst + t.fst.snd + t.snd.fst + t.snd.snd
}

fn client() {
    let a = Tuple { fst: 4, snd: 4 };
    let c = Tuple { fst: &a, snd: &a };
    assert sum(c) == 16;
}
