function sorted(xs: Seq[Int]): Bool
{
    |xs| <= 1 ? true
              : xs[0] <= xs[1] && sorted(xs[1..])
}

// sanity check
method lemma_total_order(xs: Seq[Int], i: Int, j: Int)
    requires sorted(xs)
    requires 0 <= i && i <= j && j < |xs|
    ensures xs[i] <= xs[j]
    // decreases i + j
{
    var v: Int := i + j; assert v >= 0
    if (i != 0) {
        assert i-1 + j - 1 < v
        lemma_total_order(xs[1..], i-1, j-1)
    } else {
        if (i != j) {
            assert 0 + j - 1 < v
            lemma_total_order(xs[1..], 0, j-1)
        }
    }
}

function to_multiset(xs: Seq[Int]): Multiset[Int]
{
    |xs| == 0
        ? Multiset[Int]()
        : Multiset(xs[0]) union to_multiset(xs)
}

define same_elements(xs, ys) (
    to_multiset(xs) == to_multiset(ys)
)

method insertion_sort(xs: Seq[Int]) returns (ys: Seq[Int])
    ensures sorted(ys)
    ensures |ys| == |xs|
    ensures same_elements(xs, ys)
    // decreases |xs|
{
    var v: Int := |xs|; assert v >= 0
    if (|xs| == 0) {
        ys := Seq[Int]()
    } else {
        assert |xs[1..]| < |xs|
        ys := insertion_sort(xs[1..])
        ys := insert(xs[0], ys)
    }
}



method insert(x: Int, xs: Seq[Int]) returns (ys: Seq[Int])
    requires sorted(xs)
    ensures sorted(ys)
    ensures |ys| == |xs| + 1
    ensures |xs| == 0 ==> ys[0] == x
    ensures (|xs| > 0 ==> ys[0] == x || ys[0] == xs[0])
    ensures same_elements(Seq(x) ++ xs, ys)
    // decreases |xs|
{
    var v: Int := |xs|; assert v >= 0
    if (|xs| == 0) {
        ys := Seq(x)
    } else {
        var y:Int := xs[0]
        if (x < y) {
           lemma_insert_smallest(x, xs)
            ys := Seq(x) ++ xs
        } else {
            assert |xs[1..]| < v
            ys := insert(x, xs[1..])
            lemma_insert_smallest(y, ys)
            ys := Seq(y) ++ ys

        }
    }
}

method lemma_insert_smallest(x: Int, xs: Seq[Int])
    requires sorted(xs)
    requires |xs| > 0 ==> x <= xs[0]
    ensures sorted(Seq(x) ++ xs)
{
    if (|xs| > 0) {
        var ys: Seq[Int] := Seq(x) ++ xs
        assert xs == ys[1..] // triggering ground term
    }
}
