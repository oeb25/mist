struct SumFac {
  n: int,
  sum: int,
  fac: int,
}
invariant SumFac {
  self.n >= 0 &&
  self.sum == sum(self.n) &&
  self.fac == fac(self.n)
}
//@ align
pure fn sum(n: int) -> int
  req n >= 0
  ens result >= 0
{ n * (n + 1) / 2 }
// { if n < 2 { n } else { n + sum(n - 1) } }

pure fn fac(n: int) -> int
  req n >= 0
  ens result >= 1
{ if n < 2 { 1 } else { n * fac(n - 1) } }
//@ break
fn compute(n: int) -> SumFac req n > 1, ens result.n == n {
  let r = SumFac { n: 0, sum: 0, fac: 1 };

  for i in 1..n + 1
    inv r.n == i - 1
  { r.n = i; r.sum = r.sum + i; r.fac = r.fac * i; }

  r
}
