// Mist Un-Grammar.

SourceFile =
  Item*

Item =
  Const
| Fn
| Struct
| Macro

Name = 'ident'

NameRef =
 'ident'// | 'int_number'

Const =
  Attr*
  'const' Name ':' Type
  ('=' initializer:Expr)?
  ';'

Fn =
  Attr*
 'fn' Name ParamList
 ('->' ret:Type)?
 Condition*
 (body:Block | ';')

Attr =
  'ghost'
| 'pure'

ParamList =
 '(' Param* ')'

Param = Name (':' Type)? ','?

Condition =
  Requires
| Ensures

Requires =
  'requires' CommaExpr
Ensures =
  'ensures' CommaExpr

CommaExpr =
  Expr ','?

Struct =
  Attr*
  'struct' Name '{' StructField* '}'

StructField = Name ':' Type ','?

Macro =
  'macro' Name ParamList Block

Block =
 '{'
   statements:Stmt*
   tail_expr:Expr?
 '}'

Type =
  NameRef
| Primitive
| Optional
| RefType

Primitive =
  'int'
| 'bool'

Optional =
  Type '?'

RefType =
  '&' 'mut'? Type

Stmt =
  LetStmt
| Item
| ExprStmt
| AssertStmt
| AssumeStmt
| ReturnStmt
| WhileStmt

LetStmt =
 'let' Name (':' Type)?
 ('=' initializer:Expr)?
 ';'

ExprStmt =
  Expr ';'

AssertStmt =
 'assert' CommaExpr ';'

AssumeStmt =
 'assume' CommaExpr ';'

ReturnStmt =
 'return' Expr ';'

WhileStmt =
 'while' Expr
 Invariant*
 Block

Invariant =
 'invariant' CommaExpr

Expr =
  Literal
| IfExpr
| WhileExpr
| BinExpr
| CallExpr
| IndexExpr
| StructExpr
| ParenExpr
| RefExpr
| IdentExpr
| NullExpr
| QuantifierExpr

IfExpr =
  'if' condition:Expr then_branch:Block
  ('else' else_branch:IfExprElse)?

IfExprElse =
  IfExpr | Block

WhileExpr =
  'while' condition:Expr body:Block

BinExpr =
  lhs:Expr
  op:(
    '||' | '&&'
  | '==' | '!=' | '<=' | '>=' | '<' | '>'
  | '+' | '*' | '-' | '/' | '%' | '<<' | '>>' | '^' | '|' | '&'
  | '=' | '+=' | '/=' | '*=' | '%=' | '>>=' | '<<=' | '-=' | '|=' | '&=' | '^='
  )
  rhs:Expr

CallExpr =
  Expr ArgList

ArgList =
  '(' Arg* ')'

Arg =
  Expr ','?

IndexExpr =
  base:Expr '[' index:Expr ']'

StructExpr =
  Name '{' fields:StructExprField* '}'

StructExprField =
  Name ':' Type?

ParenExpr =
  '(' Expr ')'

RefExpr =
  '&' 'mut'? Expr

IdentExpr =
  Name

NullExpr = 'null'

QuantifierExpr =
  Quantifier ParamList Expr

Quantifier =
  'forall' | 'exists'

Literal =
  value:(
    'int_number'
  | 'true' | 'false'
  )
