#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Module(pub Vec<ModuleItem>);

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum ModuleItem {
    Func(Func),
    Mem(Mem),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Func {
    pub id: Option<Id>,
    pub func_export: Option<FuncExport>,
    pub type_use: TypeUse,
    pub locals: Vec<Local>,
    pub instrs: Vec<Instr>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Mem {
    pub id: Option<Id>,
    pub mem_type: MemType,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Id(pub String);

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct FuncExport(Name);

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct TypeUse {
    pub type_idx: TypeIdx,
    pub params: Vec<Param>,
    pub results: Vec<Result>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Local {
    pub id: Option<Id>,
    pub ty: ValType,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Instr {
    pub kind: InstrKind,
    pub args: Vec<()>,
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum InstrKind {
    Unreachable,
    Nop,
    Block,
    Loop,
    If,
    Else,
    End,
    Br,
    BrIf,
    BrTable,
    Return,
    Call,
    CallIndirect,
    ReturnCall,
    ReturnCallIndirect,
    Drop,
    Select,
    SelectT,
    GetLocal,
    SetLocal,
    TeeLocal,
    GetGlobal,
    SetGlobal,
    TableGet,
    TableSet,
    I32Load,
    I64Load,
    F32Load,
    F64Load,
    I32Load8S,
    I32Load8U,
    I32Load16S,
    I32Load16U,
    I64Load8S,
    I64Load8U,
    I64Load16S,
    I64Load16U,
    I32Load32S,
    I32Load32U,
    I32Store,
    I64Store,
    F32Store,
    F64Store,
    I32Store8,
    I32Store16,
    I64Store8,
    I64Sotre16,
    I64Store32,
    MemorySize,
    MemoryGrow,
    I32Const,
    I64Const,
    F32Const,
    F64Const,
    I32Eqz,
    I32Eq,
    I32Ne,
    I32LtS,
    I32LtU,
    I32GtS,
    I32GtU,
    I32LeS,
    I32LeU,
    I32GeS,
    I32GeU,
    I64Eqz,
    I64Eq,
    I64Ne,
    I64LtS,
    I64LtU,
    I64GtS,
    I64GtU,
    I64LeS,
    I64LeU,
    I64GeS,
    I64GeU,
    F32Eq,
    F32Ne,
    F32Lt,
    F32Gt,
    F32Le,
    F32Ge,
    F64Eq,
    F64Ne,
    F64Lt,
    F64Gt,
    F64Le,
    F64Ge,
    I32Clz,
    I32Ctz,
    I32Popcnt,
    I32Add,
    I32Sub,
    I32Mul,
    I32DivS,
    I32DivU,
    I32RemS,
    I32RemU,
    I32And,
    I32Or,
    I32Xor,
    I32Shl,
    I32ShrS,
    I32ShrU,
    I32Rotl,
    I32Rotr,
    I64Clz,
    I64Ctz,
    I64Popcnt,
    I64Add,
    I64Sub,
    I64Mul,
    I64DivS,
    I64DivU,
    I64RemS,
    I64RemU,
    I64And,
    I64Or,
    I64Xor,
    I64Shl,
    I64ShrS,
    I64ShrU,
    I64Rotl,
    I64Rotr,
    F32Abs,
    F32Neg,
    F32Ceil,
    F32Floor,
    F32Trunc,
    F32Nearest,
    F32Sqrt,
    F32Add,
    F32Sub,
    F32Mul,
    F32Div,
    F32Min,
    F32Max,
    F32Copysign,
    F64Abs,
    F64Neg,
    F64Ceil,
    F64Floor,
    F64Trunc,
    F64Nearest,
    F64Sqrt,
    F64Add,
    F64Sub,
    F64Mul,
    F64Div,
    F64Min,
    F64Max,
    F64Copysign,
    I32WrapI64,
    I32TruncSF32,
    I32TruncUF32,
    I32TruncSF64,
    I32TruncUF64,
    I64ExtendSI32,
    I64ExtendUI32,
    I64TruncSF32,
    I64TruncUF32,
    I64TruncSF64,
    I64TruncUF64,
    F32ConvertSI32,
    F32ConvertUI32,
    F32ConvertSI64,
    F32ConvertUI64,
    F32DemoteF64,
    F64ConvertSI32,
    F64ConvertUI32,
    F64ConvertSI64,
    F64ConvertUI64,
    F64PromoteF32,
    I32ReinterpretF32,
    I64ReinterpretF64,
    F32ReinterpretI32,
    F64ReinterpretI64,
    I32Extend8S,
    I32Extend16S,
    I64Extend8S,
    I64Extend16S,
    I64Extend32S,
    RefNull,
    RefIsNull,
    RefFunc,
    BlockWithBlocktype,
    LoopWithBlocktype,
    IfWithBlocktype,
    DebugBreakPoint,
}
impl InstrKind {
    pub fn instr_id(&self) -> u32 {
        match self {
            Self::Unreachable => 0u32,
            Self::Nop => 1u32,
            Self::Block => 2u32,
            Self::Loop => 3u32,
            Self::If => 4u32,
            Self::Else => 5u32,
            Self::End => 11u32,
            Self::Br => 12u32,
            Self::BrIf => 13u32,
            Self::BrTable => 14u32,
            Self::Return => 15u32,
            Self::Call => 16u32,
            Self::CallIndirect => 17u32,
            Self::ReturnCall => 18u32,
            Self::ReturnCallIndirect => 19u32,
            Self::Drop => 26u32,
            Self::Select => 27u32,
            Self::SelectT => 28u32,
            Self::GetLocal => 32u32,
            Self::SetLocal => 33u32,
            Self::TeeLocal => 34u32,
            Self::GetGlobal => 35u32,
            Self::SetGlobal => 36u32,
            Self::TableGet => 37u32,
            Self::TableSet => 38u32,
            Self::I32Load => 40u32,
            Self::I64Load => 41u32,
            Self::F32Load => 42u32,
            Self::F64Load => 43u32,
            Self::I32Load8S => 44u32,
            Self::I32Load8U => 45u32,
            Self::I32Load16S => 46u32,
            Self::I32Load16U => 47u32,
            Self::I64Load8S => 48u32,
            Self::I64Load8U => 49u32,
            Self::I64Load16S => 50u32,
            Self::I64Load16U => 51u32,
            Self::I32Load32S => 52u32,
            Self::I32Load32U => 53u32,
            Self::I32Store => 54u32,
            Self::I64Store => 55u32,
            Self::F32Store => 56u32,
            Self::F64Store => 57u32,
            Self::I32Store8 => 58u32,
            Self::I32Store16 => 59u32,
            Self::I64Store8 => 60u32,
            Self::I64Sotre16 => 61u32,
            Self::I64Store32 => 62u32,
            Self::MemorySize => 63u32,
            Self::MemoryGrow => 64u32,
            Self::I32Const => 65u32,
            Self::I64Const => 66u32,
            Self::F32Const => 67u32,
            Self::F64Const => 68u32,
            Self::I32Eqz => 69u32,
            Self::I32Eq => 70u32,
            Self::I32Ne => 71u32,
            Self::I32LtS => 72u32,
            Self::I32LtU => 73u32,
            Self::I32GtS => 74u32,
            Self::I32GtU => 75u32,
            Self::I32LeS => 76u32,
            Self::I32LeU => 77u32,
            Self::I32GeS => 78u32,
            Self::I32GeU => 79u32,
            Self::I64Eqz => 80u32,
            Self::I64Eq => 81u32,
            Self::I64Ne => 82u32,
            Self::I64LtS => 83u32,
            Self::I64LtU => 84u32,
            Self::I64GtS => 85u32,
            Self::I64GtU => 86u32,
            Self::I64LeS => 87u32,
            Self::I64LeU => 88u32,
            Self::I64GeS => 89u32,
            Self::I64GeU => 90u32,
            Self::F32Eq => 91u32,
            Self::F32Ne => 92u32,
            Self::F32Lt => 93u32,
            Self::F32Gt => 94u32,
            Self::F32Le => 95u32,
            Self::F32Ge => 96u32,
            Self::F64Eq => 97u32,
            Self::F64Ne => 98u32,
            Self::F64Lt => 99u32,
            Self::F64Gt => 100u32,
            Self::F64Le => 101u32,
            Self::F64Ge => 102u32,
            Self::I32Clz => 103u32,
            Self::I32Ctz => 104u32,
            Self::I32Popcnt => 105u32,
            Self::I32Add => 106u32,
            Self::I32Sub => 107u32,
            Self::I32Mul => 108u32,
            Self::I32DivS => 109u32,
            Self::I32DivU => 110u32,
            Self::I32RemS => 111u32,
            Self::I32RemU => 112u32,
            Self::I32And => 113u32,
            Self::I32Or => 114u32,
            Self::I32Xor => 115u32,
            Self::I32Shl => 116u32,
            Self::I32ShrS => 117u32,
            Self::I32ShrU => 118u32,
            Self::I32Rotl => 119u32,
            Self::I32Rotr => 120u32,
            Self::I64Clz => 121u32,
            Self::I64Ctz => 122u32,
            Self::I64Popcnt => 123u32,
            Self::I64Add => 124u32,
            Self::I64Sub => 125u32,
            Self::I64Mul => 126u32,
            Self::I64DivS => 127u32,
            Self::I64DivU => 128u32,
            Self::I64RemS => 129u32,
            Self::I64RemU => 130u32,
            Self::I64And => 131u32,
            Self::I64Or => 132u32,
            Self::I64Xor => 133u32,
            Self::I64Shl => 134u32,
            Self::I64ShrS => 135u32,
            Self::I64ShrU => 136u32,
            Self::I64Rotl => 137u32,
            Self::I64Rotr => 138u32,
            Self::F32Abs => 139u32,
            Self::F32Neg => 140u32,
            Self::F32Ceil => 141u32,
            Self::F32Floor => 142u32,
            Self::F32Trunc => 143u32,
            Self::F32Nearest => 144u32,
            Self::F32Sqrt => 145u32,
            Self::F32Add => 146u32,
            Self::F32Sub => 147u32,
            Self::F32Mul => 148u32,
            Self::F32Div => 149u32,
            Self::F32Min => 150u32,
            Self::F32Max => 151u32,
            Self::F32Copysign => 152u32,
            Self::F64Abs => 153u32,
            Self::F64Neg => 154u32,
            Self::F64Ceil => 155u32,
            Self::F64Floor => 156u32,
            Self::F64Trunc => 157u32,
            Self::F64Nearest => 158u32,
            Self::F64Sqrt => 159u32,
            Self::F64Add => 160u32,
            Self::F64Sub => 161u32,
            Self::F64Mul => 162u32,
            Self::F64Div => 163u32,
            Self::F64Min => 164u32,
            Self::F64Max => 165u32,
            Self::F64Copysign => 166u32,
            Self::I32WrapI64 => 167u32,
            Self::I32TruncSF32 => 168u32,
            Self::I32TruncUF32 => 169u32,
            Self::I32TruncSF64 => 170u32,
            Self::I32TruncUF64 => 171u32,
            Self::I64ExtendSI32 => 172u32,
            Self::I64ExtendUI32 => 173u32,
            Self::I64TruncSF32 => 174u32,
            Self::I64TruncUF32 => 175u32,
            Self::I64TruncSF64 => 176u32,
            Self::I64TruncUF64 => 177u32,
            Self::F32ConvertSI32 => 178u32,
            Self::F32ConvertUI32 => 179u32,
            Self::F32ConvertSI64 => 180u32,
            Self::F32ConvertUI64 => 181u32,
            Self::F32DemoteF64 => 182u32,
            Self::F64ConvertSI32 => 183u32,
            Self::F64ConvertUI32 => 184u32,
            Self::F64ConvertSI64 => 185u32,
            Self::F64ConvertUI64 => 186u32,
            Self::F64PromoteF32 => 187u32,
            Self::I32ReinterpretF32 => 188u32,
            Self::I64ReinterpretF64 => 189u32,
            Self::F32ReinterpretI32 => 190u32,
            Self::F64ReinterpretI64 => 191u32,
            Self::I32Extend8S => 192u32,
            Self::I32Extend16S => 193u32,
            Self::I64Extend8S => 194u32,
            Self::I64Extend16S => 195u32,
            Self::I64Extend32S => 196u32,
            Self::RefNull => 208u32,
            Self::RefIsNull => 209u32,
            Self::RefFunc => 210u32,
            Self::BlockWithBlocktype => 211u32,
            Self::LoopWithBlocktype => 212u32,
            Self::IfWithBlocktype => 213u32,
            Self::DebugBreakPoint => 214u32,
        }
    }
}
impl std::fmt::Display for InstrKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Unreachable => write!(f, "unreachable"),
            Self::Nop => write!(f, "nop"),
            Self::Block => write!(f, "block"),
            Self::Loop => write!(f, "loop"),
            Self::If => write!(f, "if"),
            Self::Else => write!(f, "else"),
            Self::End => write!(f, "end"),
            Self::Br => write!(f, "br"),
            Self::BrIf => write!(f, "br if"),
            Self::BrTable => write!(f, "br table"),
            Self::Return => write!(f, "return"),
            Self::Call => write!(f, "call"),
            Self::CallIndirect => write!(f, "call_indirect"),
            Self::ReturnCall => write!(f, "return_call"),
            Self::ReturnCallIndirect => write!(f, "return_call_indirect"),
            Self::Drop => write!(f, "drop"),
            Self::Select => write!(f, "select"),
            Self::SelectT => write!(f, "select t"),
            Self::GetLocal => write!(f, "get_local"),
            Self::SetLocal => write!(f, "set_local"),
            Self::TeeLocal => write!(f, "tee_local"),
            Self::GetGlobal => write!(f, "get_global"),
            Self::SetGlobal => write!(f, "set_global"),
            Self::TableGet => write!(f, "table.get"),
            Self::TableSet => write!(f, "table.set"),
            Self::I32Load => write!(f, "i32.load"),
            Self::I64Load => write!(f, "i64.load"),
            Self::F32Load => write!(f, "f32.load"),
            Self::F64Load => write!(f, "f64.load"),
            Self::I32Load8S => write!(f, "i32.load8_s"),
            Self::I32Load8U => write!(f, "i32.load8_u"),
            Self::I32Load16S => write!(f, "i32.load16_s"),
            Self::I32Load16U => write!(f, "i32.load16_u"),
            Self::I64Load8S => write!(f, "i64.load8_s"),
            Self::I64Load8U => write!(f, "i64.load8_u"),
            Self::I64Load16S => write!(f, "i64.load16_s"),
            Self::I64Load16U => write!(f, "i64.load16_u"),
            Self::I32Load32S => write!(f, "i32.load32_s"),
            Self::I32Load32U => write!(f, "i32.load32_u"),
            Self::I32Store => write!(f, "i32.store"),
            Self::I64Store => write!(f, "i64.store"),
            Self::F32Store => write!(f, "f32.store"),
            Self::F64Store => write!(f, "f64.store"),
            Self::I32Store8 => write!(f, "i32.store8"),
            Self::I32Store16 => write!(f, "i32.store16"),
            Self::I64Store8 => write!(f, "i64.store8"),
            Self::I64Sotre16 => write!(f, "i64.sotre16"),
            Self::I64Store32 => write!(f, "i64.store32"),
            Self::MemorySize => write!(f, "memory.size"),
            Self::MemoryGrow => write!(f, "memory.grow"),
            Self::I32Const => write!(f, "i32.const"),
            Self::I64Const => write!(f, "i64.const"),
            Self::F32Const => write!(f, "f32.const"),
            Self::F64Const => write!(f, "f64.const"),
            Self::I32Eqz => write!(f, "i32.eqz"),
            Self::I32Eq => write!(f, "i32.eq"),
            Self::I32Ne => write!(f, "i32.ne"),
            Self::I32LtS => write!(f, "i32.lt_s"),
            Self::I32LtU => write!(f, "i32.lt_u"),
            Self::I32GtS => write!(f, "i32.gt_s"),
            Self::I32GtU => write!(f, "i32.gt_u"),
            Self::I32LeS => write!(f, "i32.le_s"),
            Self::I32LeU => write!(f, "i32.le_u"),
            Self::I32GeS => write!(f, "i32.ge_s"),
            Self::I32GeU => write!(f, "i32.ge_u"),
            Self::I64Eqz => write!(f, "i64.eqz"),
            Self::I64Eq => write!(f, "i64.eq"),
            Self::I64Ne => write!(f, "i64.ne"),
            Self::I64LtS => write!(f, "i64.lt_s"),
            Self::I64LtU => write!(f, "i64.lt_u"),
            Self::I64GtS => write!(f, "i64.gt_s"),
            Self::I64GtU => write!(f, "i64.gt_u"),
            Self::I64LeS => write!(f, "i64.le_s"),
            Self::I64LeU => write!(f, "i64.le_u"),
            Self::I64GeS => write!(f, "i64.ge_s"),
            Self::I64GeU => write!(f, "i64.ge_u"),
            Self::F32Eq => write!(f, "f32.eq"),
            Self::F32Ne => write!(f, "f32.ne"),
            Self::F32Lt => write!(f, "f32.lt"),
            Self::F32Gt => write!(f, "f32.gt"),
            Self::F32Le => write!(f, "f32.le"),
            Self::F32Ge => write!(f, "f32.ge"),
            Self::F64Eq => write!(f, "f64.eq"),
            Self::F64Ne => write!(f, "f64.ne"),
            Self::F64Lt => write!(f, "f64.lt"),
            Self::F64Gt => write!(f, "f64.gt"),
            Self::F64Le => write!(f, "f64.le"),
            Self::F64Ge => write!(f, "f64.ge"),
            Self::I32Clz => write!(f, "i32.clz"),
            Self::I32Ctz => write!(f, "i32.ctz"),
            Self::I32Popcnt => write!(f, "i32.popcnt"),
            Self::I32Add => write!(f, "i32.add"),
            Self::I32Sub => write!(f, "i32.sub"),
            Self::I32Mul => write!(f, "i32.mul"),
            Self::I32DivS => write!(f, "i32.div_s"),
            Self::I32DivU => write!(f, "i32.div_u"),
            Self::I32RemS => write!(f, "i32.rem_s"),
            Self::I32RemU => write!(f, "i32.rem_u"),
            Self::I32And => write!(f, "i32.and"),
            Self::I32Or => write!(f, "i32.or"),
            Self::I32Xor => write!(f, "i32.xor"),
            Self::I32Shl => write!(f, "i32.shl"),
            Self::I32ShrS => write!(f, "i32.shr_s"),
            Self::I32ShrU => write!(f, "i32.shr_u"),
            Self::I32Rotl => write!(f, "i32.rotl"),
            Self::I32Rotr => write!(f, "i32.rotr"),
            Self::I64Clz => write!(f, "i64.clz"),
            Self::I64Ctz => write!(f, "i64.ctz"),
            Self::I64Popcnt => write!(f, "i64.popcnt"),
            Self::I64Add => write!(f, "i64.add"),
            Self::I64Sub => write!(f, "i64.sub"),
            Self::I64Mul => write!(f, "i64.mul"),
            Self::I64DivS => write!(f, "i64.div_s"),
            Self::I64DivU => write!(f, "i64.div_u"),
            Self::I64RemS => write!(f, "i64.rem_s"),
            Self::I64RemU => write!(f, "i64.rem_u"),
            Self::I64And => write!(f, "i64.and"),
            Self::I64Or => write!(f, "i64.or"),
            Self::I64Xor => write!(f, "i64.xor"),
            Self::I64Shl => write!(f, "i64.shl"),
            Self::I64ShrS => write!(f, "i64.shr_s"),
            Self::I64ShrU => write!(f, "i64.shr_u"),
            Self::I64Rotl => write!(f, "i64.rotl"),
            Self::I64Rotr => write!(f, "i64.rotr"),
            Self::F32Abs => write!(f, "f32.abs"),
            Self::F32Neg => write!(f, "f32.neg"),
            Self::F32Ceil => write!(f, "f32.ceil"),
            Self::F32Floor => write!(f, "f32.floor"),
            Self::F32Trunc => write!(f, "f32.trunc"),
            Self::F32Nearest => write!(f, "f32.nearest"),
            Self::F32Sqrt => write!(f, "f32.sqrt"),
            Self::F32Add => write!(f, "f32.add"),
            Self::F32Sub => write!(f, "f32.sub"),
            Self::F32Mul => write!(f, "f32.mul"),
            Self::F32Div => write!(f, "f32.div"),
            Self::F32Min => write!(f, "f32.min"),
            Self::F32Max => write!(f, "f32.max"),
            Self::F32Copysign => write!(f, "f32.copysign"),
            Self::F64Abs => write!(f, "f64.abs"),
            Self::F64Neg => write!(f, "f64.neg"),
            Self::F64Ceil => write!(f, "f64.ceil"),
            Self::F64Floor => write!(f, "f64.floor"),
            Self::F64Trunc => write!(f, "f64.trunc"),
            Self::F64Nearest => write!(f, "f64.nearest"),
            Self::F64Sqrt => write!(f, "f64.sqrt"),
            Self::F64Add => write!(f, "f64.add"),
            Self::F64Sub => write!(f, "f64.sub"),
            Self::F64Mul => write!(f, "f64.mul"),
            Self::F64Div => write!(f, "f64.div"),
            Self::F64Min => write!(f, "f64.min"),
            Self::F64Max => write!(f, "f64.max"),
            Self::F64Copysign => write!(f, "f64.copysign"),
            Self::I32WrapI64 => write!(f, "i32.wrap/i64"),
            Self::I32TruncSF32 => write!(f, "i32.trunc_s/f32"),
            Self::I32TruncUF32 => write!(f, "i32.trunc_u/f32"),
            Self::I32TruncSF64 => write!(f, "i32.trunc_s/f64"),
            Self::I32TruncUF64 => write!(f, "i32.trunc_u/f64"),
            Self::I64ExtendSI32 => write!(f, "i64.extend_s/i32"),
            Self::I64ExtendUI32 => write!(f, "i64.extend_u/i32"),
            Self::I64TruncSF32 => write!(f, "i64.trunc_s/f32"),
            Self::I64TruncUF32 => write!(f, "i64.trunc_u/f32"),
            Self::I64TruncSF64 => write!(f, "i64.trunc_s/f64"),
            Self::I64TruncUF64 => write!(f, "i64.trunc_u/f64"),
            Self::F32ConvertSI32 => write!(f, "f32.convert_s/i32"),
            Self::F32ConvertUI32 => write!(f, "f32.convert_u/i32"),
            Self::F32ConvertSI64 => write!(f, "f32.convert_s/i64"),
            Self::F32ConvertUI64 => write!(f, "f32.convert_u/i64"),
            Self::F32DemoteF64 => write!(f, "f32.demote/f64"),
            Self::F64ConvertSI32 => write!(f, "f64.convert_s/i32"),
            Self::F64ConvertUI32 => write!(f, "f64.convert_u/i32"),
            Self::F64ConvertSI64 => write!(f, "f64.convert_s/i64"),
            Self::F64ConvertUI64 => write!(f, "f64.convert_u/i64"),
            Self::F64PromoteF32 => write!(f, "f64.promote/f32"),
            Self::I32ReinterpretF32 => write!(f, "i32.reinterpret/f32"),
            Self::I64ReinterpretF64 => write!(f, "i64.reinterpret/f64"),
            Self::F32ReinterpretI32 => write!(f, "f32.reinterpret/i32"),
            Self::F64ReinterpretI64 => write!(f, "f64.reinterpret/i64"),
            Self::I32Extend8S => write!(f, "i32.extend8_s"),
            Self::I32Extend16S => write!(f, "i32.extend16_s"),
            Self::I64Extend8S => write!(f, "i64.extend8_s"),
            Self::I64Extend16S => write!(f, "i64.extend16_s"),
            Self::I64Extend32S => write!(f, "i64.extend32_s"),
            Self::RefNull => write!(f, "ref.null"),
            Self::RefIsNull => write!(f, "ref.is_null"),
            Self::RefFunc => write!(f, "ref.func"),
            Self::BlockWithBlocktype => write!(f, "block with blocktype"),
            Self::LoopWithBlocktype => write!(f, "loop with blocktype"),
            Self::IfWithBlocktype => write!(f, "if with blocktype"),
            Self::DebugBreakPoint => write!(f, "debug break point"),
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Name(pub String);

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum TypeIdx {
    Idx(u32),
    Id(Id),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Param {
    pub id: Option<Id>,
    pub ty: ValType,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Result {
    pub ty: ValType,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
#[non_exhaustive]
pub enum ValType {
    I32,
    I64,
    F32,
    F64,
    V128,
    Funcref,
    Externref,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct MemType(Limits);

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Limits {
    pub min: u32,
    pub max: Option<u32>,
}
