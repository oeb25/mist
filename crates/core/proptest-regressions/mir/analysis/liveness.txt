# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 717ffbf5b372116e923e97865826d3945c45bb3b0268dcd05f90202c9a8089d8 # shrinks to (ctx, places) = (Context { cx: ItemContext { item_id: ItemId(Id { value: 2 }), function_context: Some(FunctionContext { function_var: VariableRef { idx: Variable(0), span: SourceSpan { offset: 53, length: 1 } }, conditions: [], decreases: Unspecified, return_ty_src: None }), declarations: Trace { arena: {Variable(0): Variable(Id { value: 2 }), Variable(1): Variable(Id { value: 3 }), Variable(2): Variable(Id { value: 4 }), Variable(3): Variable(Id { value: 5 })}, map: {Variable(0): VariableDeclaration { name: "f", kind: Function }, Variable(1): VariableDeclaration { name: "x", kind: Parameter }, Variable(2): VariableDeclaration { name: "y", kind: Parameter }, Variable(3): VariableDeclaration { name: "z", kind: Parameter }} }, var_types: {Variable(0): TypeSrc(6), Variable(1): TypeSrc(7), Variable(2): TypeSrc(8), Variable(3): TypeSrc(9)}, expr_arena: {Expr(0): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 91, length: 1 } }) }, Expr(1): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(0), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(2): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 112, length: 1 } }) }, Expr(3): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(2), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(4): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(3), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(5): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 135, length: 1 } }) }, Expr(6): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(5), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(7): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(6), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(8): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(7), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(9): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 160, length: 1 } }) }, Expr(10): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(9), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(11): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 181, length: 1 } }) }, Expr(12): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(11), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(13): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(12), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(14): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 204, length: 1 } }) }, Expr(15): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(14), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(16): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(15), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(17): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(16), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(18): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 229, length: 1 } }) }, Expr(19): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(18), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(20): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(19), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(21): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 252, length: 1 } }) }, Expr(22): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(21), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(23): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(22), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(24): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(23), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(25): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 277, length: 1 } }) }, Expr(26): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(25), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(27): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(26), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(28): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 300, length: 1 } }) }, Expr(29): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(28), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(30): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(29), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(31): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(30), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(32): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 325, length: 1 } }) }, Expr(33): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(32), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(34): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(33), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(35): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(34), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(36): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 350, length: 1 } }) }, Expr(37): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(36), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(38): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(37), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(39): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(38), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(40): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 375, length: 1 } }) }, Expr(41): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(40), field_name: "a", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(42): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(41), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(43): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(42), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(44): Expr { ty: TypeId(TypeData(5)), data: Ident(VariableRef { idx: Variable(1), span: SourceSpan { offset: 400, length: 1 } }) }, Expr(45): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(44), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(46): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(45), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(47): Expr { ty: TypeId(TypeData(5)), data: Field { expr: Expr(46), field_name: "b", field: Some(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }) } }, Expr(48): Expr { ty: TypeId(TypeData(2)), data: Block(Block { stmts: [Statement { span: SourceSpan { offset: 91, length: 4 }, data: Expr(Expr(1)) }, Statement { span: SourceSpan { offset: 112, length: 6 }, data: Expr(Expr(4)) }, Statement { span: SourceSpan { offset: 135, length: 8 }, data: Expr(Expr(8)) }, Statement { span: SourceSpan { offset: 160, length: 4 }, data: Expr(Expr(10)) }, Statement { span: SourceSpan { offset: 181, length: 6 }, data: Expr(Expr(13)) }, Statement { span: SourceSpan { offset: 204, length: 8 }, data: Expr(Expr(17)) }, Statement { span: SourceSpan { offset: 229, length: 6 }, data: Expr(Expr(20)) }, Statement { span: SourceSpan { offset: 252, length: 8 }, data: Expr(Expr(24)) }, Statement { span: SourceSpan { offset: 277, length: 6 }, data: Expr(Expr(27)) }, Statement { span: SourceSpan { offset: 300, length: 8 }, data: Expr(Expr(31)) }, Statement { span: SourceSpan { offset: 325, length: 8 }, data: Expr(Expr(35)) }, Statement { span: SourceSpan { offset: 350, length: 8 }, data: Expr(Expr(39)) }, Statement { span: SourceSpan { offset: 375, length: 8 }, data: Expr(Expr(43)) }, Statement { span: SourceSpan { offset: 400, length: 8 }, data: Expr(Expr(47)) }], tail_expr: None, return_ty: TypeId(TypeData(2)) }) }}, ty_src_arena: {TypeSrc(0): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(1): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(2): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(3): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(4): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(5): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(6): TypeSrc { data: None, ty: TypeId(TypeData(6)) }, TypeSrc(7): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(8): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(9): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(10): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(11): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(12): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(13): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(14): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(15): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(16): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(17): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(18): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(19): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(20): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(21): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(22): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(23): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(24): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(25): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(26): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(27): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(28): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(29): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(30): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(31): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(32): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(33): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(34): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(35): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(36): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(37): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(38): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(39): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(40): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(41): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(42): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }, TypeSrc(43): TypeSrc { data: Some(Struct(Struct(Id { value: 1 }))), ty: TypeId(TypeData(5)) }}, ty_table: {TypeData(0): Primitive(Bool), TypeData(1): Primitive(Int), TypeData(2): Void, TypeData(3): Null, TypeData(4): Error, TypeData(5): Struct(Struct(Id { value: 1 })), TypeData(6): Function { attrs: AttrFlags(0x0), name: Some("f"), params: [Param { is_ghost: false, name: "x", ty: TypeSrc(3) }, Param { is_ghost: false, name: "y", ty: TypeSrc(4) }, Param { is_ghost: false, name: "z", ty: TypeSrc(5) }], return_ty: TypeId(TypeData(2)) }}, named_types: {"P": TypeId(TypeData(5))}, structs: {Struct(Id { value: 1 }): [(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeSrc(1)), (Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeSrc(2))]}, struct_types: {Struct(Id { value: 1 }): TypeSrc(0)}, params: [Param { is_ghost: false, name: Variable(1), ty: TypeSrc(7) }, Param { is_ghost: false, name: Variable(2), ty: TypeSrc(8) }, Param { is_ghost: false, name: Variable(3), ty: TypeSrc(9) }], body_expr: Some(Expr(48)), return_ty: None, error_ty: TypeId(TypeData(4)), int_ty: TypeId(TypeData(1)) }, body: Body { item_id: ItemId(Id { value: 2 }), blocks: {:B0: Block { instructions: [], terminator: Some(Goto(:B1)) }, :B1: Block { instructions: [], terminator: None }}, instructions: {}, slots: {%0: Var(Variable(1)), %1: Var(Variable(2)), %2: Var(Variable(3))}, projections: {Vec<Projection>(0): [], Vec<Projection>(1): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(2): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(3): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(4): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(5): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(6): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(7): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(8): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(9): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(10): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(11): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(12): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(13): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "a", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 27..28 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))], Vec<Projection>(14): [Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5))), Field(Field { parent: Struct(Struct(Id { value: 1 })), name: "b", is_ghost: false, ty: Some(AstPtr { raw: SyntaxNodePtr { kind: NAMED_TYPE, range: 33..34 }, _ty: PhantomData<fn() -> mist_syntax::ast::generated::Type> }) }, TypeId(TypeData(5)))]}, functions: {}, params: [%0, %1, %2], block_invariants: {}, slot_type: {%0: TypeId(TypeData(5)), %1: TypeId(TypeData(5)), %2: TypeId(TypeData(5))}, requires: [], ensures: [], invariants: [], result_slot: None, body_block: Some(:B0) } }, [])
cc 53d98bdba9ac32e3c39c97b8a3b3bde65556b55d4915e02bcffbcc0b2211ea20 # shrinks to Input { ctx, lhs, .. } = Input({}, {})
cc 89c223ba2e57a7c833248aff41abcde0bd45629812f300af2be3ba2000d2fb5b # shrinks to Input { ctx, trees } = Input({"%2_z.a"})
