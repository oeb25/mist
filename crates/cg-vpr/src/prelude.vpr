domain ListToSet[T] {
  function list_to_set(l: Seq[T]): Set[T]
  function set_to_list(s: Set[T]): Seq[T]
  function multi_set_to_list(s: Multiset[T]): Seq[T]
  function list_to_multi_set(l: Seq[T]): Multiset[T]

  axiom {
    forall l: Seq[T] :: |l| >= |list_to_set(l)|
  }
  axiom {
    forall l: Seq[T] :: forall e: T :: e in l == e in list_to_set(l)
  }
  axiom {
    forall s: Set[T] :: |s| == |set_to_list(s)|
  }
  axiom {
    forall s: Set[T] :: forall e: T :: e in s == e in set_to_list(s)
  }

  axiom {
    forall l: Seq[T] :: list_to_multi_set(l) ==
      ((|l| == 0)
        ? Multiset()
        : Multiset(l[0]) union list_to_multi_set(l[1..]))
  }
  // axiom {
  //   forall l: Seq[T] :: |l| == |list_to_multi_set(l)|
  // }
  // axiom {
  //   forall l: Seq[T] :: forall e: T :: e in l == e in list_to_multi_set(l)
  // }
  // axiom {
  //   forall s: Multiset[T] :: |s| == |multi_set_to_list(s)|
  // }
  // axiom {
  //   forall s: Multiset[T] :: forall e: T :: e in s == e in multi_set_to_list(s)
  // }
}

domain Range {
  function range_from(x: Int): Range
  function range_to(x: Int): Range
  function range_from_to(from: Int, to: Int): Range

  function range_min(r: Range): Int
  function range_max(r: Range): Int

  function in_range(idx: Int, r: Range): Bool

  axiom axRangeMin {
    forall x: Int, y: Int ::
      range_min(range_from(x)) == x &&
      range_min(range_from_to(x, y)) == x
  }
  axiom axRangeMax {
    forall x: Int, y: Int ::
      range_max(range_from_to(x, y)) == y &&
      range_max(range_to(y)) == y
  }

  axiom axRangeIn {
    forall x: Int, y: Int, idx: Int ::
      in_range(idx, range_from(x)) == (x <= idx) &&
      in_range(idx, range_from_to(x, y)) == (x <= idx && idx < y) &&
      in_range(idx, range_to(y)) == (idx < y)
  }

  axiom axRangeOrdered {
    forall r: Range, idx: Int ::
      in_range(idx, r) ==> range_min(r) < range_max(r)
  }
}

domain RangeIndex[T] {
  function range_index(x: Seq[T], r: Range): Seq[T]
  axiom axRangefrom {
    forall x: Int, s: Seq[T] :: range_index(s, range_from(x)) == s[x..]
  }
  axiom axRangeto {
    forall x: Int, s: Seq[T] :: range_index(s, range_to(x)) == s[x..]
  }
  axiom axRangeFromTo {
    forall from: Int, to: Int, s: Seq[T] :: range_index(s, range_from_to(from, to)) == s[from..to]
  }
}

define QRefAcc(T, x, p) acc(T(fst(x)), snd(x) * p)
define QRefUnfold(T, x, p) { unfold acc(T(fst(x)), snd(x) * p) }
define QRefUnfolding(T, x, p, e) unfolding acc(T(fst(x)), snd(x) * p) in e
define QRefFold(T, x, p) { fold acc(T(fst(x)), snd(x) * p) }
define QRefReborrow(x) ( create(fst(x), snd(x) * 1/256) )
define QRefProject(x, f) (create(fst(x).f, snd(x)))


domain QRef {
  function create($a: Ref, $b: Perm): QRef;
  function fst($q: QRef): Ref;
  function snd($q: QRef): Perm;

  axiom {
    forall $a: Ref, $b: Perm :: fst(create($a, $b)) == $a
  }
  axiom {
    forall $a: Ref, $b: Perm :: snd(create($a, $b)) == $b
  }
  axiom {
    forall $q: QRef :: snd($q) >= none
  }
}
