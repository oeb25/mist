{
  "scopeName": "source.mist",
  "patterns": [{ "include": "#expression" }],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#function" },
        { "include": "#invariant" },
        { "include": "#struct" },
        { "include": "#keywords" },
        { "include": "#primitive-type" },
        { "include": "#comment" },
        { "include": "#operator" },
        { "include": "#variable" },

        { "include": "#grouper" },
        { "include": "#punctuation" }
      ]
    },
    "keywords": {
      "match": "\\b(const|struct|return|mut|assume|fn|assert|let|self|in|if|else|ghost|pure|requires|req|ensures|ens|decreases|dec|invariant|inv|result|macro|forall|exists|while|true|false)\\b",
      "name": "keyword"
    },
    "primitive-type": {
      "match": "\\b(int|bool)\\b",
      "name": "entity.name.type.numeric.mist"
    },
    "function": {
      "match": "\\b(fn)\\s+([a-zA-Z0-9_]+)",
      "captures": {
        "1": { "name": "keyword.other.fn.mist" },
        "2": { "name": "entity.name.function.mist" }
      }
    },
    "invariant": {
      "match": "\\b(invariant)\\s+([a-zA-Z0-9_]+)\\s+\\{",
      "captures": {
        "1": { "name": "keyword.other.invariant.mist" },
        "2": { "name": "entity.name.type.mist" }
      }
    },
    "struct": {
      "match": "\\b(struct)\\s+([a-zA-Z0-9_]+)",
      "captures": {
        "1": { "name": "keyword.other.struct.mist" },
        "2": { "name": "entity.name.type.mist" }
      }
    },
    "operator": {
      "match": "(-|,|->|:=|!|!=|\\(|\\)|\\{|\\}|\\*|/|\\^|&&|&|\\+|<|<=|=|>|>=|\\|\\||\\||;|:|::|\\?)",
      "name": "keyword.operator"
    },
    "variable": {
      "match": "[a-zA-Z][a-zA-Z_]*",
      "name": "identifier"
    },

    "grouper": {
      "match": "\\(|\\)|\\[|\\]|\\{|\\}|\\{\\||\\|\\}|_",
      "name": "punctuation.separator"
    },
    "punctuation": {
      "match": ",|\\.|;|:",
      "name": "punctuation.separator"
    },
    "paren-expression": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": { "name": "punctuation.paren.open" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.paren.close" }
      },
      "name": "expression.group",
      "patterns": [{ "include": "#expression" }]
    },
    "comment": {
      "match": "//.*",
      "name": "comment.line"
    }
  }
}
